/*
Deployment script for ProjMgmtDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ProjMgmtDB"
:setvar DefaultFilePrefix "ProjMgmtDB"
:setvar DefaultDataPath "C:\Users\Ren\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Ren\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Assignments]...';


GO
CREATE TABLE [dbo].[Assignments] (
    [Id]           INT  IDENTITY (1, 1) NOT NULL,
    [TaskId]       INT  NOT NULL,
    [DepartmentId] INT  NOT NULL,
    [EmployeeId]   INT  NULL,
    [StartDate]    DATE NULL,
    [EndDate]      DATE NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Clients]...';


GO
CREATE TABLE [dbo].[Clients] (
    [Id]       INT           IDENTITY (1, 1) NOT NULL,
    [Name]     NVARCHAR (30) NOT NULL,
    [Phone]    NVARCHAR (30) NOT NULL,
    [Email]    NVARCHAR (30) NOT NULL,
    [RegionId] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Departments]...';


GO
CREATE TABLE [dbo].[Departments] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [Department]  NVARCHAR (30) NOT NULL,
    [Description] NVARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[DepartmentsInventory]...';


GO
CREATE TABLE [dbo].[DepartmentsInventory] (
    [DepartmentId] INT NOT NULL,
    [EmployeeId]   INT NOT NULL,
    [AssignmentId] INT NOT NULL,
    CONSTRAINT [CK_DepartmentsInventory] PRIMARY KEY CLUSTERED ([DepartmentId] ASC, [EmployeeId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Employees]...';


GO
CREATE TABLE [dbo].[Employees] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [Email]        NVARCHAR (30) NOT NULL,
    [Password]     NVARCHAR (30) NOT NULL,
    [FirstName]    NVARCHAR (30) NOT NULL,
    [LastName]     NVARCHAR (30) NOT NULL,
    [RoleId]       INT           NOT NULL,
    [DepartmentId] INT           NOT NULL,
    [RegionId]     INT           NOT NULL,
    [Phone]        NVARCHAR (30) NULL,
    [DateHired]    DATETIME2 (7) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Posts]...';


GO
CREATE TABLE [dbo].[Posts] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [UserId]      INT            NOT NULL,
    [Title]       NVARCHAR (150) NOT NULL,
    [Body]        TEXT           NOT NULL,
    [DateCreated] DATETIME2 (7)  NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Projects]...';


GO
CREATE TABLE [dbo].[Projects] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [Title]       NVARCHAR (30) NOT NULL,
    [Description] NVARCHAR (30) NOT NULL,
    [ClientId]    INT           NOT NULL,
    [Budget]      FLOAT (53)    NOT NULL,
    [EmployeeId]  INT           NULL,
    [StartDate]   DATE          NOT NULL,
    [EndDate]     DATE          NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Regions]...';


GO
CREATE TABLE [dbo].[Regions] (
    [Id]     INT           IDENTITY (1, 1) NOT NULL,
    [Region] NVARCHAR (30) NOT NULL,
    [Code]   NVARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Roles]...';


GO
CREATE TABLE [dbo].[Roles] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Role] NVARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Tasks]...';


GO
CREATE TABLE [dbo].[Tasks] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [Description] NVARCHAR (30) NOT NULL,
    [ProjectId]   INT           NOT NULL,
    [BeginDate]   DATE          NOT NULL,
    [DueDate]     DATE          NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [UserName]  NVARCHAR (30) NOT NULL,
    [FirstName] NVARCHAR (30) NOT NULL,
    [LastName]  NVARCHAR (30) NOT NULL,
    [Password]  NVARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Assignments_Tasks]...';


GO
ALTER TABLE [dbo].[Assignments]
    ADD CONSTRAINT [FK_Assignments_Tasks] FOREIGN KEY ([TaskId]) REFERENCES [dbo].[Tasks] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Assignments_Departments]...';


GO
ALTER TABLE [dbo].[Assignments]
    ADD CONSTRAINT [FK_Assignments_Departments] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[Departments] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Assignments_Employees]...';


GO
ALTER TABLE [dbo].[Assignments]
    ADD CONSTRAINT [FK_Assignments_Employees] FOREIGN KEY ([EmployeeId]) REFERENCES [dbo].[Departments] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Clients_Regions]...';


GO
ALTER TABLE [dbo].[Clients]
    ADD CONSTRAINT [FK_Clients_Regions] FOREIGN KEY ([RegionId]) REFERENCES [dbo].[Regions] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DepartmentInventory_Employees]...';


GO
ALTER TABLE [dbo].[DepartmentsInventory]
    ADD CONSTRAINT [FK_DepartmentInventory_Employees] FOREIGN KEY ([EmployeeId]) REFERENCES [dbo].[Employees] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DepartmentInventory_Departments]...';


GO
ALTER TABLE [dbo].[DepartmentsInventory]
    ADD CONSTRAINT [FK_DepartmentInventory_Departments] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[Departments] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DepartmentInventory_Assignments]...';


GO
ALTER TABLE [dbo].[DepartmentsInventory]
    ADD CONSTRAINT [FK_DepartmentInventory_Assignments] FOREIGN KEY ([AssignmentId]) REFERENCES [dbo].[Assignments] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Employees_Roles]...';


GO
ALTER TABLE [dbo].[Employees]
    ADD CONSTRAINT [FK_Employees_Roles] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Roles] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Employees_Departments]...';


GO
ALTER TABLE [dbo].[Employees]
    ADD CONSTRAINT [FK_Employees_Departments] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[Departments] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Employees_Regions]...';


GO
ALTER TABLE [dbo].[Employees]
    ADD CONSTRAINT [FK_Employees_Regions] FOREIGN KEY ([RegionId]) REFERENCES [dbo].[Regions] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Posts_ToTable]...';


GO
ALTER TABLE [dbo].[Posts]
    ADD CONSTRAINT [FK_Posts_ToTable] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Projects_Employees]...';


GO
ALTER TABLE [dbo].[Projects]
    ADD CONSTRAINT [FK_Projects_Employees] FOREIGN KEY ([EmployeeId]) REFERENCES [dbo].[Employees] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Projects_Clients]...';


GO
ALTER TABLE [dbo].[Projects]
    ADD CONSTRAINT [FK_Projects_Clients] FOREIGN KEY ([ClientId]) REFERENCES [dbo].[Clients] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Tasks_Projects]...';


GO
ALTER TABLE [dbo].[Tasks]
    ADD CONSTRAINT [FK_Tasks_Projects] FOREIGN KEY ([ProjectId]) REFERENCES [dbo].[Projects] ([Id]);


GO
PRINT N'Creating Procedure [dbo].[spAssignmentEmployees_List]...';


GO
CREATE PROCEDURE [dbo].[spAssignmentEmployees_List]
	@id int
AS
begin
	set nocount on;

	SELECT  [p].[Id], [p].[Title], [t].[Id], [t].[Description], [a].[Id], [a].[StartDate], [a].[EndDate], [e].[FirstName], [e].[LastName]
	FROM dbo.Assignments a
	INNER JOIN dbo.Employees e
	ON a.EmployeeId = e.Id
	INNER JOIN dbo.Tasks t
	ON a.TaskId = t.Id
	INNER JOIN dbo.Projects p
	ON t.ProjectId = p.Id
	WHERE a.Id = @id;
	
end
GO
PRINT N'Creating Procedure [dbo].[spAssignments_Add]...';


GO
CREATE PROCEDURE [dbo].[spAssignments_Add]
	@taskId int, 
	@employeeId int, 
	@startDate date, 
	@endDate date
AS
begin
	set nocount on;

	INSERT INTO dbo.Assignments
	(TaskId, EmployeeId, StartDate, EndDate)
	VALUES (@taskId, @employeeId, @startDate, @endDate)

end
GO
PRINT N'Creating Procedure [dbo].[spAssignments_Delete]...';


GO
CREATE PROCEDURE [dbo].[spAssignments_Delete]
	@id int
AS
begin
	set nocount on;

	DELETE FROM dbo.Assignments
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spAssignments_Details]...';


GO
CREATE PROCEDURE [dbo].[spAssignments_Details]
	@id int
AS
begin
	set nocount on;

	SELECT  [a].[Id], [t].[Description], [e].[Email], [a].[StartDate], [a].[EndDate]
	FROM dbo.Assignments a
	INNER JOIN dbo.Tasks t
	ON a.TaskId = t.Id
	INNER JOIN dbo.Employees e
	ON a.EmployeeId = e.Id
	WHERE a.Id = @id;
	
end
GO
PRINT N'Creating Procedure [dbo].[spAssignments_Edit]...';


GO
CREATE PROCEDURE [dbo].[spAssignments_Edit]
	@id int,
	@employeeId int, 
	@startDate date, 
	@endDate date
AS
begin
	set nocount on;

	UPDATE dbo.Assignments
	SET EmployeeId=@employeeId, StartDate=@startDate, EndDate=@endDate
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spAssignments_List]...';


GO
CREATE PROCEDURE [dbo].[spAssignments_List]
AS
begin
	set nocount on;

	SELECT  [a].[Id], [t].[Description], [e].[Email], [a].[StartDate], [a].[EndDate]
	FROM dbo.Assignments a
	INNER JOIN dbo.Tasks t
	ON a.TaskId = t.Id
	INNER JOIN dbo.Employees e
	ON a.EmployeeId = e.Id
	
end
GO
PRINT N'Creating Procedure [dbo].[spClients_Add]...';


GO
CREATE PROCEDURE [dbo].[spClients_Add]
	@name nvarchar (30),
	@phone nvarchar (30),
	@email nvarchar (30),
	@regionId int
AS
begin
	set nocount on;

	INSERT INTO dbo.Clients
	(Name, Phone, Email, RegionId)
	VALUES (@name, @phone, @email, @regionId)

end
GO
PRINT N'Creating Procedure [dbo].[spClients_Delete]...';


GO
CREATE PROCEDURE [dbo].[spClients_Delete]
	@id int
AS
begin
	set nocount on;

	DELETE FROM dbo.Clients
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spClients_Details]...';


GO
CREATE PROCEDURE [dbo].[spClients_Details]
	@id int
AS
begin
	set nocount on;

	SELECT  [c].[Id], [c].[Name], [c].[Phone], [c].[Email], [r].[Code]
	FROM dbo.Clients c
	INNER JOIN dbo.Regions r
	ON c.RegionId = r.Id
	WHERE c.Id = @id;
	
end
GO
PRINT N'Creating Procedure [dbo].[spClients_Edit]...';


GO
CREATE PROCEDURE [dbo].[spClients_Edit]
	@id int,
	@phone nvarchar(30), 
	@email nvarchar(30)
AS
begin
	set nocount on;

	UPDATE dbo.Clients
	SET Phone=@phone, Email=@email
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spClients_List]...';


GO
CREATE PROCEDURE [dbo].[spClients_List]
AS
begin
	set nocount on;

	SELECT  [c].[Id], [c].[Name], [c].[Phone], [c].[Email], [r].[Code]
	FROM dbo.Clients c
	INNER JOIN dbo.Regions r
	ON c.RegionId = r.Id
	
end
GO
PRINT N'Creating Procedure [dbo].[spDepartments_Add]...';


GO
CREATE PROCEDURE [dbo].[spDepartments_Add]
	@department nvarchar (30), 
	@description nvarchar (30)
AS
begin
	set nocount on;

	INSERT INTO dbo.Departments
	(Department, Description)
	VALUES (@department, @description)

end
GO
PRINT N'Creating Procedure [dbo].[spDepartments_Delete]...';


GO
CREATE PROCEDURE [dbo].[spDepartments_Delete]
	@id int
AS
begin
	set nocount on;

	DELETE FROM dbo.Departments
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spDepartments_Details]...';


GO
CREATE PROCEDURE [dbo].[spDepartments_Details]
	@id int
AS
begin
	set nocount on;

	SELECT  [Id], [Department], [Description]
	FROM dbo.Departments
	WHERE Id = @id;
	
end
GO
PRINT N'Creating Procedure [dbo].[spDepartments_Edit]...';


GO
CREATE PROCEDURE [dbo].[spDepartments_Edit]
	@id int,
	@department nvarchar(30), 
	@description nvarchar(30)
AS
begin
	set nocount on;

	UPDATE dbo.Departments
	SET Department=@department, Description=@description
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spDepartments_List]...';


GO
CREATE PROCEDURE [dbo].[spDepartments_List]
AS
begin
	set nocount on;

	SELECT  [Id], [Department], [Description]
	FROM dbo.Departments
	
end
GO
PRINT N'Creating Procedure [dbo].[spEmployees_Authenticate]...';


GO
CREATE PROCEDURE [dbo].[spEmployees_Authenticate]
	@email nvarchar (30),
	@password nvarchar (30)
AS
begin
	set nocount on;

	SELECT [Id], [Email], [FirstName], [LastName], [Password]
	FROM dbo.Employees
	WHERE Email = @email
	AND Password = @password;

end
GO
PRINT N'Creating Procedure [dbo].[spEmployees_Delete]...';


GO
CREATE PROCEDURE [dbo].[spEmployees_Delete]
	@id int
AS
begin
	set nocount on;

	DELETE FROM dbo.Employees
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spEmployees_Details]...';


GO
CREATE PROCEDURE [dbo].[spEmployees_Details]
	@id int
AS
begin
	set nocount on;

	SELECT  [e].[Id], [e].[Email], [e].[FirstName], [e].[LastName], [ro].[Role], [d].[Department], [re].[Code], [e].[Phone], [e].[DateHired]
	FROM dbo.Employees e
	INNER JOIN dbo.Roles ro
	ON e.RoleId = ro.Id
	INNER JOIN dbo.Departments d
	ON e.DepartmentId = d.Id
	INNER JOIN dbo.Regions re
	ON e.RegionId = re.Id
	WHERE e.Id = @id;
	
end
GO
PRINT N'Creating Procedure [dbo].[spEmployees_Edit]...';


GO
CREATE PROCEDURE [dbo].[spEmployees_Edit]
	@id int,
	@password nvarchar(30),
	@phone nvarchar(30)
AS
begin
	set nocount on;

	UPDATE dbo.Employees
	SET Password=@password, Phone=@phone
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spEmployees_List]...';


GO
CREATE PROCEDURE [dbo].[spEmployees_List]
AS
begin
	set nocount on;

	SELECT  [e].[Id], [e].[Email], [e].[FirstName], [e].[LastName], [ro].[Role], [d].[Department], [re].[Code], [e].[Phone], [e].[DateHired]
	FROM dbo.Employees e
	INNER JOIN dbo.Roles ro
	ON e.RoleId = ro.Id
	INNER JOIN dbo.Departments d
	ON e.DepartmentId = d.Id
	INNER JOIN dbo.Regions re
	ON e.RegionId = re.Id
	
end
GO
PRINT N'Creating Procedure [dbo].[spEmployees_Register]...';


GO
CREATE PROCEDURE [dbo].[spEmployees_Register]
	@email nvarchar (30),
	@password nvarchar (30),
	@firstName nvarchar (30),
	@lastName nvarchar (30),
	@roleId int,
	@departmentId int,
	@regionId int,
	@phone nvarchar (30),
	@dateHired datetime2
AS
begin
	set nocount on;

	INSERT INTO dbo.Employees
	(Email, Password, FirstName, LastName, RoleId, DepartmentId, RegionId, Phone, DateHired)
	VALUES (@email, @password, @firstName, @lastName, @roleId, @departmentId, @regionId, @phone)

end
GO
PRINT N'Creating Procedure [dbo].[spPosts_Details]...';


GO
CREATE PROCEDURE [dbo].[spPosts_Details]
	@id int
AS
begin
	set nocount on;

	SELECT  [p].[Id], [p].[Title], [p].[Body], [p].[DateCreated], [u].[UserName], [u].[FirstName], [u].[LastName]
	FROM dbo.Posts p
	INNER JOIN dbo.Users u
	ON p.UserId = u.Id
	WHERE p.Id = @id;
	
end
GO
PRINT N'Creating Procedure [dbo].[spPosts_Insert]...';


GO
CREATE PROCEDURE [dbo].[spPosts_Insert]
	@userId int,
	@title nvarchar(150),
	@body text,
	@dateCreated datetime2
AS
begin
	INSERT INTO dbo.Posts
	(UserId, Title, Body, DateCreated)
	VALUES
	(@userId, @title, @body, @dateCreated)
	
end
GO
PRINT N'Creating Procedure [dbo].[spPosts_List]...';


GO
CREATE PROCEDURE [dbo].[spPosts_List]
AS
begin
	set nocount on;

	SELECT  [p].[Id], [p].[Title], [p].[Body], [p].[DateCreated], [u].[UserName], [u].[FirstName], [u].[LastName]
	FROM dbo.Posts p
	INNER JOIN dbo.Users u
	ON p.UserId = u.Id
	
end
GO
PRINT N'Creating Procedure [dbo].[spProjects_Add]...';


GO
CREATE PROCEDURE [dbo].[spProjects_Add]
	@title nvarchar (30), 
	@description nvarchar (30), 
	@clientId int, 
	@budget float, 
	@employeeId int, 
	@startDate date, 
	@endDate date
AS
begin
	set nocount on;

	INSERT INTO dbo.Projects
	(Title, Description, ClientId, Budget, EmployeeId, StartDate, EndDate)
	VALUES (@title, @description, @clientId, @budget, @employeeId, @startDate, @endDate)

end
GO
PRINT N'Creating Procedure [dbo].[spProjects_Delete]...';


GO
CREATE PROCEDURE [dbo].[spProjects_Delete]
	@id int
AS
begin
	set nocount on;

	DELETE FROM dbo.Projects
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spProjects_Details]...';


GO
CREATE PROCEDURE [dbo].[spProjects_Details]
	@id int
AS
begin
	set nocount on;

	SELECT  [p].[Id], [p].[Title], [p].[Description], [c].[Name], [p].[Budget], [e].[Email], [p].[StartDate], [p].[EndDate]
	FROM dbo.Projects p
	INNER JOIN dbo.Clients c
	ON p.ClientId = c.Id
	INNER JOIN dbo.Employees e
	ON p.EmployeeId = e.Id
	WHERE p.Id = @id;
	
end
GO
PRINT N'Creating Procedure [dbo].[spProjects_Edit]...';


GO
CREATE PROCEDURE [dbo].[spProjects_Edit]
	@id int,
	@title nvarchar(30),
	@description nvarchar(30),
	@budget float
AS
begin
	set nocount on;

	UPDATE dbo.Projects
	SET Title=@title, Description=@description, Budget=@budget
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spProjects_List]...';


GO
CREATE PROCEDURE [dbo].[spProjects_List]
AS
begin
	set nocount on;

	SELECT  [p].[Id], [p].[Title], [p].[Description], [c].[Name], [p].[Budget], [e].[Email], [p].[StartDate], [p].[EndDate]
	FROM dbo.Projects p
	INNER JOIN dbo.Clients c
	ON p.ClientId = c.Id
	INNER JOIN dbo.Employees e
	ON p.EmployeeId = e.Id
	
end
GO
PRINT N'Creating Procedure [dbo].[spProjectTasks_List]...';


GO
CREATE PROCEDURE [dbo].[spProjectTasks_List]
	@id int
AS
begin
	set nocount on;

	SELECT  [p].[Id], [p].[Title], [p].[StartDate], [p].[EndDate], [t].[Id], [t].[Description], [t].[BeginDate], [t].[DueDate]
	FROM dbo.Tasks t
	INNER JOIN dbo.Projects p
	ON t.ProjectId = p.Id
	WHERE p.Id = @id;
	
end
GO
PRINT N'Creating Procedure [dbo].[spRegions_Delete]...';


GO
CREATE PROCEDURE [dbo].[spRegions_Delete]
	@id int
AS
begin
	set nocount on;

	DELETE FROM dbo.Regions
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spRegions_Details]...';


GO
CREATE PROCEDURE [dbo].[spRegions_Details]
	@id int
AS
begin
	set nocount on;

	SELECT  [Id], [Region], [Code]
	FROM dbo.Regions
	WHERE Id = @id;
	
end
GO
PRINT N'Creating Procedure [dbo].[spRegions_Edit]...';


GO
CREATE PROCEDURE [dbo].[spRegions_Edit]
	@id int,
	@region nvarchar(30),
	@code nvarchar(30)
AS
begin
	set nocount on;

	UPDATE dbo.Regions
	SET Region=@region, Code=@code
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spRegions_List]...';


GO
CREATE PROCEDURE [dbo].[spRegions_List]
AS
begin
	set nocount on;

	SELECT  [Id], [Region], [Code]
	FROM dbo.Regions
	
end
GO
PRINT N'Creating Procedure [dbo].[spRegions_Register]...';


GO
CREATE PROCEDURE [dbo].[spRegions_Register]
	@region nvarchar (30),
	@code nvarchar (30)
AS
begin
	set nocount on;

	INSERT INTO dbo.Regions
	(Region, Code)
	VALUES (@region, @code)

end
GO
PRINT N'Creating Procedure [dbo].[spRoles_Add]...';


GO
CREATE PROCEDURE [dbo].[spRoles_Add]
	@role nvarchar (30)
AS
begin
	set nocount on;

	INSERT INTO dbo.Roles
	(Role)
	VALUES (@role)

end
GO
PRINT N'Creating Procedure [dbo].[spRoles_Delete]...';


GO
CREATE PROCEDURE [dbo].[spRoles_Delete]
	@id int
AS
begin
	set nocount on;

	DELETE FROM dbo.Roles
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spRoles_Details]...';


GO
CREATE PROCEDURE [dbo].[spRoles_Details]
	@id int
AS
begin
	set nocount on;

	SELECT  [Role]
	FROM dbo.Roles
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spRoles_Edit]...';


GO
CREATE PROCEDURE [dbo].[spRoles_Edit]
	@id int,
	@role nvarchar(30)
AS
begin
	set nocount on;

	UPDATE dbo.Roles
	SET Role=@role
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spRoles_List]...';


GO
CREATE PROCEDURE [dbo].[spRoles_List]
AS
begin
	set nocount on;

	SELECT  [Role]
	FROM dbo.Roles

end
GO
PRINT N'Creating Procedure [dbo].[spTaskAssignments_List]...';


GO
CREATE PROCEDURE [dbo].[spTaskAssignments_List]
	@id int
AS
begin
	set nocount on;

	SELECT  [p].[Id], [p].[Title], [t].[Id], [t].[Description], [t].[BeginDate], [t].[DueDate], [a].[Id], [a].[StartDate], [a].[EndDate]
	FROM dbo.Assignments a
	INNER JOIN dbo.Tasks t
	ON a.TaskId = t.Id
	INNER JOIN dbo.Projects p
	ON t.ProjectId = p.Id
	WHERE t.Id = @id;
	
end
GO
PRINT N'Creating Procedure [dbo].[spTasks_Add]...';


GO
CREATE PROCEDURE [dbo].[spTasks_Add]
	@name nvarchar (30),
	@description nvarchar (30), 
	@projectId int, 
	@beginDate date, 
	@dueDate date
AS
begin
	set nocount on;

	INSERT INTO dbo.Tasks
	(Description, ProjectId, BeginDate, DueDate)
	VALUES (@description, @projectId, @beginDate, @dueDate)

end
GO
PRINT N'Creating Procedure [dbo].[spTasks_Delete]...';


GO
CREATE PROCEDURE [dbo].[spTasks_Delete]
	@id int
AS
begin
	set nocount on;

	DELETE FROM dbo.Tasks
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spTasks_Details]...';


GO
CREATE PROCEDURE [dbo].[spTasks_Details]
	@id int
AS
begin
	set nocount on;

	SELECT  [t].[Id], [t].[Description], [p].[Title], [t].[BeginDate], [t].[DueDate]
	FROM dbo.Tasks t
	INNER JOIN dbo.Projects p
	ON t.ProjectId = p.Id
	WHERE t.Id = @id;
	
end
GO
PRINT N'Creating Procedure [dbo].[spTasks_Edit]...';


GO
CREATE PROCEDURE [dbo].[spTasks_Edit]
	@id int,
	@description nvarchar(30)
AS
begin
	set nocount on;

	UPDATE dbo.Tasks
	SET Description=@description
	WHERE Id = @id;

end
GO
PRINT N'Creating Procedure [dbo].[spTasks_List]...';


GO
CREATE PROCEDURE [dbo].[spTasks_List]
AS
begin
	set nocount on;

	SELECT  [t].[Id], [t].[Description], [p].[Title], [t].[BeginDate], [t].[DueDate]
	FROM dbo.Tasks t
	INNER JOIN dbo.Projects p
	ON t.ProjectId = p.Id
	
end
GO
PRINT N'Creating Procedure [dbo].[spUsers_Authenticate]...';


GO
CREATE PROCEDURE [dbo].[spUsers_Authenticate]
	@username nvarchar (30),
	@password nvarchar (30)
AS
begin
	set nocount on;

	SELECT [Id], [UserName], [FirstName], [LastName], [Password]
	FROM dbo.Users
	WHERE UserName = @username
	AND Password = @password;

end
GO
PRINT N'Creating Procedure [dbo].[spUsers_Register]...';


GO
CREATE PROCEDURE [dbo].[spUsers_Register]
	@userName nvarchar (30),
	@firstName nvarchar (30),
	@lastName nvarchar (30),
	@password nvarchar (30)
AS
begin
	set nocount on;

	INSERT INTO dbo.Users
	(UserName, FirstName, LastName, Password)
	VALUES (@userName, @firstName, @lastName, @password)

end
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
